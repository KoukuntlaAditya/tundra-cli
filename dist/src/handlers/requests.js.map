{"version":3,"sources":["../../../src/handlers/requests.js"],"names":["handleRequest","request","response","handle","handleMatchedRequest","handlePartiallyMatchedRequest","handleUnmatchedRequest","type","embeddedRequest","body","embeddedResponse","console","log","blue","method","url","yellow","statusCode","requests","concat","data","status","send","resetRequestsHandler","saveRequestsHandler","profileName","resetProfile","map","push","sortedRequests","chain","sortBy","value","green"],"mappings":";;;;;;;AAAA;;;;AACA;;AACA;;AACA;;;;;;;;;;AAEO,IAAMA,wCAAgB,SAAhBA,aAAgB,CAACC,OAAD,EAAUC,QAAV;AAAA,SAAuBC,OAAO,QAAP,EAAiBF,OAAjB,EAA0BC,QAA1B,CAAvB;AAAA,CAAtB;AACA,IAAME,sDAAuB,SAAvBA,oBAAuB,CAACH,OAAD,EAAUC,QAAV;AAAA,SAAuBC,OAAO,SAAP,EAAkBF,OAAlB,EAA2BC,QAA3B,CAAvB;AAAA,CAA7B;AACA,IAAMG,wEAAgC,SAAhCA,6BAAgC,CAACJ,OAAD,EAAUC,QAAV;AAAA,SAAuBC,OAAO,mBAAP,EAA4BF,OAA5B,EAAqCC,QAArC,CAAvB;AAAA,CAAtC;AACA,IAAMI,0DAAyB,SAAzBA,sBAAyB,CAACL,OAAD,EAAUC,QAAV;AAAA,SAAuBC,OAAO,WAAP,EAAoBF,OAApB,EAA6BC,QAA7B,CAAvB;AAAA,CAA/B;;AAEP,IAAMC,SAAS,SAATA,MAAS,CAACI,IAAD,EAAON,OAAP,EAAgBC,QAAhB,EAA6B;AAC1C,MAAMM,kBAAkBP,QAAQQ,IAAR,CAAaR,OAArC;AACA,MAAMS,mBAAmBT,QAAQQ,IAAR,CAAaP,QAAtC;;AAEAS,UAAQC,GAAR,CAAY,gBAAMC,IAAN,WAAmBN,IAAnB,UAA4BC,gBAAgBM,MAA5C,SAAsDN,gBAAgBO,GAAtE,UAAgF,gBAAMC,MAAN,OAAiBN,iBAAiBO,UAAlC,OAA5F;;AAEA,uBAAS;AACPC,cAAU,uBAAWA,QAAX,CAAoBC,MAApB,CAA2B,EAAEZ,UAAF,EAAQa,MAAMnB,QAAQQ,IAAtB,EAA3B;AADH,GAAT;;AAIAP,WAASmB,MAAT,CAAgB,GAAhB,EAAqBC,IAArB;AACD,CAXD;;AAaO,IAAMC,sDAAuB,SAAvBA,oBAAuB,CAACtB,OAAD,EAAUC,QAAV,EAAuB;AACzD,uBAAS,EAAEgB,UAAU,EAAZ,EAAT;;AAEAhB,WAASmB,MAAT,CAAgB,GAAhB,EAAqBC,IAArB;AACD,CAJM;;AAMA,IAAME;AAAA,qEAAsB,iBAAOvB,OAAP,EAAgBC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3BuB,uBAD2B,GACbxB,QAAQQ,IAAR,CAAagB,WADA;AAE3BC,wBAF2B,GAEZzB,QAAQQ,IAAR,CAAaiB,YAFD;AAI7BR,oBAJ6B,GAIlB,uBAAWA,QAAX,CAAoBS,GAApB,CAAwB;AAAA,qBAAW1B,QAAQmB,IAAnB;AAAA,aAAxB,CAJkB;;AAAA,gBAM5BM,YAN4B;AAAA;AAAA;AAAA;;AAAA,0BAO/BR,QAP+B,CAOtBU,IAPsB;AAAA,0BAO/BV,QAP+B;AAAA;AAAA;AAAA,mBAOR,yCAA2BO,WAA3B,CAPQ;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAS3BI,0BAT2B,GASV,sBAAEX,QAAF,EAAYY,KAAZ,GACpBC,MADoB,CACb,gBADa,EAEpBA,MAFoB,CAEb,aAFa,EAGpBC,KAHoB,EATU;AAAA;AAAA,mBAc3B,oCAAsBH,cAAtB,EAAsCJ,WAAtC,CAd2B;;AAAA;;AAgBjCd,oBAAQC,GAAR,CAAY,gBAAMqB,KAAN,qDAA8DR,WAA9D,gBAAZ;;AAEAvB,qBAASmB,MAAT,CAAgB,GAAhB,EAAqBC,IAArB;;AAlBiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"requests.js","sourcesContent":["import chalk from 'chalk';\nimport { getState, setState } from '../services/state';\nimport { getExistingProfileRequests, saveRequestsAsProfile } from '../services/profile';\nimport _ from 'lodash';\n\nexport const handleRequest = (request, response) => handle('normal', request, response);\nexport const handleMatchedRequest = (request, response) => handle('matched', request, response);\nexport const handlePartiallyMatchedRequest = (request, response) => handle('partially-matched', request, response);\nexport const handleUnmatchedRequest = (request, response) => handle('unmatched', request, response);\n\nconst handle = (type, request, response) => {\n  const embeddedRequest = request.body.request;\n  const embeddedResponse = request.body.response;\n\n  console.log(chalk.blue(`--> [${type}] ${embeddedRequest.method} ${embeddedRequest.url} `) + chalk.yellow(`(${embeddedResponse.statusCode})`));\n\n  setState({\n    requests: getState().requests.concat({ type, data: request.body })\n  });\n\n  response.status(201).send();\n};\n\nexport const resetRequestsHandler = (request, response) => {\n  setState({ requests: [] });\n\n  response.status(200).send();\n};\n\nexport const saveRequestsHandler = async (request, response) => {\n  const profileName = request.body.profileName;\n  const resetProfile = request.body.resetProfile;\n\n  let requests = getState().requests.map(request => request.data);\n\n  if (!resetProfile)\n    requests.push(...await getExistingProfileRequests(profileName));\n\n  const sortedRequests = _(requests).chain()\n    .sortBy('request.method')\n    .sortBy('request.url')\n    .value();\n\n  await saveRequestsAsProfile(sortedRequests, profileName);\n\n  console.log(chalk.green(`Captured requests successfully stored as the \\'${profileName}\\' profile`));\n\n  response.status(200).send();\n};\n\n\n"]}