{"version":3,"sources":["../../src/server.js"],"names":["Socket","start","port","fixturesDirectory","server","use","json","static","delete","post","get","listen","console","log","green","init","socketPort"],"mappings":";;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAMA;;;;AACA;;;;AACA;;AACA;;IAAYA,M;;AACZ;;;;;;;;;;AAEO,IAAMC;AAAA,qEAAQ,iBAAOC,IAAP,EAAaC,iBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAEbC,kBAFa,GAEJ,wBAFI;;AAInB;;AACAA,mBAAOC,GAAP,CAAW,qBAAWC,IAAX,EAAX;;AAEA;AACAF,mBAAOC,GAAP,CAAW,kBAAQE,MAAR,CAAe,eAAf,CAAX;;AAEA;AACAH,mBAAOI,MAAP,CAAc,WAAd;AACAJ,mBAAOK,IAAP,CAAY,WAAZ;AACAL,mBAAOK,IAAP,CAAY,mBAAZ;AACAL,mBAAOK,IAAP,CAAY,6BAAZ;AACAL,mBAAOK,IAAP,CAAY,qBAAZ;AACAL,mBAAOK,IAAP,CAAY,gBAAZ;;AAEAL,mBAAOM,GAAP,CAAW,WAAX;;AAEAN,mBAAOM,GAAP,CAAW,WAAX;;AAEAN,mBAAOO,MAAP,CAAcT,IAAd,EAAoB;AAAA,qBAAMU,QAAQC,GAAR,CAAY,gBAAMC,KAAN,mEAA4EZ,IAA5E,OAAZ,CAAN;AAAA,aAApB;;AAEA;AAxBmB;AAAA,mBAyBMF,OAAOe,IAAP,EAzBN;;AAAA;AAyBbC,sBAzBa;;;AA2BnBJ,oBAAQC,GAAR,6BAAsCG,UAAtC;;AAEA,iCAAS,EAAEd,UAAF,EAAQc,sBAAR,EAAoBb,oCAApB,EAAT;;AAEA;AACAS,oBAAQC,GAAR;AACA,qDAAwBX,IAAxB;;AAjCmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAR;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"server.js","sourcesContent":["import 'babel-polyfill';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport chalk from 'chalk';\nimport {\n  handleMatchedRequest,\n  handlePartiallyMatchedRequest,\n  handleRequest,\n  handleUnmatchedRequest, resetRequestsHandler, saveRequestsHandler\n} from './handlers/requests';\nimport settingsHandler from './handlers/settings';\nimport profilesHandler from './handlers/profiles';\nimport { setState } from './services/state';\nimport * as Socket from './services/socket';\nimport opn from 'opn';\n\nexport const start = async (port, fixturesDirectory) => {\n\n  const server = express();\n\n  // Settings\n  server.use(bodyParser.json());\n\n  // Console\n  server.use(express.static('console/build'));\n\n  // Routes\n  server.delete('/requests', resetRequestsHandler);\n  server.post('/requests', handleRequest);\n  server.post('/requests/matched', handleMatchedRequest);\n  server.post('/requests/partially-matched', handlePartiallyMatchedRequest);\n  server.post('/requests/unmatched', handleUnmatchedRequest);\n  server.post('/requests/save', saveRequestsHandler);\n\n  server.get('/settings', settingsHandler);\n\n  server.get('/profiles', profilesHandler);\n\n  server.listen(port, () => console.log(chalk.green(`Tundra server started. Console available at http://localhost:${port}.`)));\n\n  // Websocket Server\n  const socketPort = await Socket.init();\n\n  console.log(`Socket started on port ${socketPort}. Waiting for client to join...`);\n\n  setState({ port, socketPort, fixturesDirectory });\n\n  // Launch Console\n  console.log(`Launching console...`);\n  opn(`http://localhost:${port}`);\n};\n\n\n"]}