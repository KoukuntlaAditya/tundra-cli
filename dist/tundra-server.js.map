{"version":3,"sources":["../tundra-server.js"],"names":["listenForRequests","port","profile","fixturesDirectory","resetProfile","server","use","json","requests","post","request","response","embeddedRequest","body","embeddedResponse","console","log","blue","method","url","yellow","statusCode","push","sendStatus","listen","green","waitForStopCommand","getExistingProfileRequests","sortedRequests","chain","sortBy","value","saveRequestsAsProfile","process","exit","JSON","readFileSync","cwd","parse","profilesDirectory","writeFileSync","stringify","actionCallback","toUpperCase","trim"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;AAEO,IAAMA;AAAA,uEAAoB,kBAAOC,IAAP,EAAaC,OAAb,EAAsBC,iBAAtB,EAAyCC,YAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBC,8BADuB,GACd,wBADc;;AAE7BA,+BAAOC,GAAP,CAAW,qBAAWC,IAAX,EAAX;;AAEIC,gCAJyB,GAId,EAJc;;;AAM7BH,+BAAOI,IAAP,CAAY,WAAZ,EAAyB,UAACC,OAAD,EAAUC,QAAV,EAAuB;;AAE5C,gCAAMC,kBAAkBF,QAAQG,IAAR,CAAaH,OAArC;AACA,gCAAMI,mBAAmBJ,QAAQG,IAAR,CAAaF,QAAtC;;AAEAI,oCAAQC,GAAR,CAAY,gBAAMC,IAAN,UAAkBL,gBAAgBM,MAAlC,SAA4CN,gBAAgBO,GAA5D,UAAsE,gBAAMC,MAAN,OAAiBN,iBAAiBO,UAAlC,OAAlF;;AAEAb,qCAASc,IAAT,CAAcZ,QAAQG,IAAtB;AACAF,qCAASY,UAAT,CAAoB,GAApB;AACH,yBATD;;AAWAlB,+BAAOmB,MAAP,CAAcvB,IAAd,EAAoB;AAAA,mCAAMc,QAAQC,GAAR,CAAY,gBAAMS,KAAN,iDAA0DxB,IAA1D,eAAZ,CAAN;AAAA,yBAApB;;AAjB6B;AAAA,+BAmBvByB,2EAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAEhBtB,YAFgB;AAAA;AAAA;AAAA;;AAAA,0DAGjBI,QAHiB,CAGRc,IAHQ;AAAA,0DAGjBd,QAHiB;AAAA;AAAA;AAAA,mDAGMmB,2BAA2BzB,OAA3B,EAAoCC,iBAApC,CAHN;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAKfyB,0DALe,GAKE,sBAAEpB,QAAF,EAAYqB,KAAZ,GAClBC,MADkB,CACX,gBADW,EAElBA,MAFkB,CAEX,aAFW,EAGlBC,KAHkB,EALF;AAAA;AAAA,mDAUfC,sBAAsBJ,cAAtB,EAAsC1B,OAAtC,EAA+CC,iBAA/C,CAVe;;AAAA;;AAYrBY,oDAAQC,GAAR,CAAY,gBAAMS,KAAN,CAAY,gCAAZ,CAAZ;AACAQ,oDAAQC,IAAR;;AAbqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAnB,GAnBuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAoCP,IAAMP;AAAA,wEAA6B,kBAAMzB,OAAN,EAAeC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAEpBgC,IAFoB;AAAA;AAAA,+BAEH,aAAGC,YAAH,CAAmBH,QAAQI,GAAR,EAAnB,SAAoClC,iBAApC,kBAAkED,OAAlE,YAAkF,OAAlF,CAFG;;AAAA;AAAA;AAAA,uEAEfoC,KAFe;;AAAA;AAAA;AAAA;AAAA,0DAIpB,EAJoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA7B;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAQA,IAAMN;AAAA,wEAAwB,kBAAexB,QAAf,EAAyBN,OAAzB,EAAkCC,iBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBoC,yCADoB,GACGN,QAAQI,GAAR,EADH,SACoBlC,iBADpB;;;AAG1B,8CAAOoC,iBAAP;AAH0B;AAAA,+BAIpB,aAAGC,aAAH,CAAoBD,iBAApB,SAAyCrC,OAAzC,YAAyDiC,KAAKM,SAAL,CAAejC,QAAf,EAAyB,IAAzB,EAA+B,CAA/B,CAAzD,EAA4F,MAA5F,CAJoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAxB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAOA,SAASkB,kBAAT,CAA4BgB,cAA5B,EAA4C;AACxC,4DAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACiB,wBAAO,EAAP,CADjB;;AAAA;AAAA,sDAC6BC,WAD7B,GAC2CC,IAD3C;;AAAA,6CACsD,MADtD;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAECF;;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;AAIH","file":"tundra-server.js","sourcesContent":["import prompt from 'co-prompt';\nimport co from 'co';\nimport 'babel-polyfill';\nimport chalk from 'chalk';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport mkdirp from \"mkdirp\";\nimport fs from 'fs';\nimport _ from 'lodash';\n\nexport const listenForRequests = async (port, profile, fixturesDirectory, resetProfile) => {\n    const server = express();\n    server.use(bodyParser.json());\n\n    let requests = [];\n\n    server.post('/requests', (request, response) => {\n\n        const embeddedRequest = request.body.request;\n        const embeddedResponse = request.body.response;\n\n        console.log(chalk.blue(`--> ${embeddedRequest.method} ${embeddedRequest.url} `) + chalk.yellow(`(${embeddedResponse.statusCode})`));\n\n        requests.push(request.body);\n        response.sendStatus(201);\n    });\n\n    server.listen(port, () => console.log(chalk.green(`Listening for requests on http://localhost:${port}/requests`)));\n\n    await waitForStopCommand(async () => {\n\n        if (!resetProfile)\n            requests.push(...await getExistingProfileRequests(profile, fixturesDirectory));\n\n        const sortedRequests = _(requests).chain()\n            .sortBy('request.method')\n            .sortBy('request.url')\n            .value();\n\n        await saveRequestsAsProfile(sortedRequests, profile, fixturesDirectory);\n\n        console.log(chalk.green('Profile successfully captured!'));\n        process.exit()\n    });\n};\n\nconst getExistingProfileRequests = async(profile, fixturesDirectory) => {\n    try {\n        return JSON.parse(await fs.readFileSync(`${process.cwd()}/${fixturesDirectory}/profiles/${profile}.json`, 'utf-8'));\n    } catch (e) {\n        return [];\n    }\n};\n\nconst saveRequestsAsProfile = async function(requests, profile, fixturesDirectory) {\n    const profilesDirectory = `${process.cwd()}/${fixturesDirectory}/profiles`;\n\n    mkdirp(profilesDirectory);\n    await fs.writeFileSync(`${profilesDirectory}/${profile}.json`, JSON.stringify(requests, null, 2), 'utf8');\n};\n\nfunction waitForStopCommand(actionCallback) {\n    co(function *() {\n        while (!((yield prompt('')).toUpperCase().trim() === 'STOP'));\n        actionCallback();\n    });\n}"]}